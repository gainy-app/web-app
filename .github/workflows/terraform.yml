name: Terraform

on:
  workflow_dispatch:
    inputs:
      env:
        description: 'Environment'
        default: 'test'
        required: true
  workflow_call:
    inputs:
      env:
        type: string
        required: true
      only_plan:
        type: boolean
        default: true
        required: true
    secrets:
      TF_API_TOKEN: { required: true }
      AWS_ACCESS_KEY_ID: { required: true }
      AWS_SECRET_ACCESS_KEY: { required: true }
      CLOUDFLARE_EMAIL: { required: true }
      CLOUDFLARE_API_KEY: { required: true }
      CLOUDFLARE_ZONE_ID: { required: true }
      FIREBASE_API_KEY: { required: true }
      FIREBASE_AUTH_DOMAIN: { required: true }
      FIREBASE_PROJECT_ID: { required: true }
      FIREBASE_STORAGE_BUCKET: { required: true }
      FIREBASE_SENDER_ID: { required: true }
      FIREBASE_APP_ID: { required: true }
      HASURA_URL: { required: true }
      GTM_CONTAINER: { required: true }

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: us-east-1
  REACT_APP_FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
  REACT_APP_FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
  REACT_APP_FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
  REACT_APP_FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
  REACT_APP_FIREBASE_SENDER_ID: ${{ secrets.FIREBASE_SENDER_ID }}
  REACT_APP_FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
  REACT_APP_HASURA_URL: ${{ secrets.HASURA_URL }}
  REACT_APP_GTM_CONTAINER: ${{ secrets.GTM_CONTAINER }}
  REACT_APP_ENV: ${{ inputs.env }}
  TF_VAR_env: ${{ inputs.env }}
  TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
  TF_VAR_aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_VAR_cloudflare_email: ${{ secrets.CLOUDFLARE_EMAIL }}
  TF_VAR_cloudflare_api_key: ${{ secrets.CLOUDFLARE_API_KEY }}
  TF_VAR_cloudflare_zone_id: ${{ secrets.CLOUDFLARE_ZONE_ID }}

jobs:
  build:
    name: "Build"
    runs-on: ubuntu-latest
    environment: ${{ inputs.env }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install node.js
        run: sudo apt install nodejs npm

      - name: npm install
        run: npm install

      - name: npm run build
        run: npm run build

      - uses: actions/upload-artifact@master
        with:
          name: build
          path: build

  test:
    name: "Test"
    runs-on: ubuntu-latest
    if: inputs.only_plan
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check -recursive
        working-directory: terraform

      - name: Terraform Init
        id: init
        run: terraform init -backend-config=backend-${{ env.TF_VAR_env }}.hcl -reconfigure
        working-directory: terraform

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: terraform

      - uses: actions/download-artifact@master
        with:
          name: build
          path: terraform/build

      - name: Terraform Plan
        id: plan
        if: inputs.only_plan
        run: terraform plan -no-color -lock=false
        working-directory: terraform

  deploy:
    name: "Deploy"
    runs-on: ubuntu-latest
    if: "!inputs.only_plan"
    environment: ${{ inputs.env }}
    concurrency: ${{ inputs.env }}
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        id: init
        run: terraform init -backend-config=backend-${{ env.TF_VAR_env }}.hcl -reconfigure
        working-directory: terraform

      - uses: actions/download-artifact@master
        with:
          name: build
          path: terraform/build

      - name: Terraform Apply
        id: apply
        if: "!inputs.only_plan"
        run: terraform apply -auto-approve
        working-directory: terraform
